const { google } = require("googleapis");
const sheets = google.sheets('v4');
import { createClient, getKeyWorkerFormSheetId, getMapSheetId, getTokens } from 'backend/common-googleSheet'

async function createAuthorizedClient() {
	try {
		const oAuth2Client = await createClient();
		let tokens = await getTokens();
		oAuth2Client.setCredentials(tokens);
		// const accessToken = await oAuth2Client.refreshAccessToken(tokens); // deprecated
        const accessToken = oAuth2Client.getAccessToken(); // replaces deprecated API call				
		oAuth2Client.getTokenInfo(accessToken); // checks validity of tokens
		return oAuth2Client;
	} catch (err) {
		console.log("failed to refresh token" + err);
	}
}

export async function saveFormData(values) {
	const authorizedAuthClient = await createAuthorizedClient();
	const keyWorkerFormsheetId = await getKeyWorkerFormSheetId();
	return insertRow(values, authorizedAuthClient, keyWorkerFormsheetId);
}

export async function getMapData() {
	const authorizedAuthClient = await createAuthorizedClient();
	const mapSheetId = await getKeyWorkerFormSheetId();
	return getMapKeyWorkerData(authorizedAuthClient, mapSheetId);
}

async function insertRow(values, authClient, ssId) {
	const request = {
		spreadsheetId: ssId,  // The ID of the spreadsheet to update.
		valueInputOption: 'RAW',  // How the input data should be interpreted.
		insertDataOption: 'INSERT_ROWS',  // How the input data should be inserted.
		range: 'A1:A2', // The A1 notation of a range to search
						// for a logical table of data. Values will be
						// appended after the last row of the table.
		resource: {
			"values": [
				values
			]
		},
		auth: authClient,
	};
	try {
		return (await sheets.spreadsheets.values.append(request)).data;
	} catch (err) {
		console.log("error in append values" + err);
	}
}

async function getMapKeyWorkerData(authClient, ssId) {
	const request = {
		spreadsheetId: ssId,  // The ID of the spreadsheet to retrieve data from.
		auth: authClient,
		ranges: 'A1:Z1000'
	  };
	try {
		return (await sheets.spreadsheets.values.batchGet(request)).data;
	}
	catch (err) {
		console.log("error in get values" + err);
	}
}